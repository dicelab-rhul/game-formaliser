###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two competing companies are launching new products. Each can either go for aggressive advertising or moderate advertising. If both go moderate, they maintain market share, each earning 0 points. If one goes aggressive while the other goes moderate, the aggressive advertiser captures more market share, earning 4 points, and the moderate advertiser loses market share, earning –4 points. If both go aggressive, they overspend on advertising, negating profits and each earning –20 points.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Certainly! Below is a complete set of domain-specific axioms for the game involving two competing companies, as described, compatible with SWI Prolog. The clauses of a specified predicate are kept together and properly marked with discontiguous declaration where necessary.

```prolog
@
% Using the 'discontiguous' directive for SWI Prolog
:- discontiguous payoffCompany/4.
:- discontiguous initially/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous possible/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous finally/2.
:- discontiguous holds/2.

% Payoff matrix for the competing companies game
payoffCompany('Aggressive', 'Aggressive', -20, -20).
payoffCompany('Moderate', 'Aggressive', -4, 4).
payoffCompany('Aggressive', 'Moderate', 4, -4).
payoffCompany('Moderate', 'Moderate', 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a company, their role, and whether they can play.    
initially(company(c1), s0).
initially(company(c2), s0).
initially(role(c1, row), s0).
initially(role(c2, col), s0).
initially(control(c1), s0).
initially(control(c2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_C2, _M2), do(choice(_C1, _M1), S))):- initial(S).

% A legal move is a possible move where the company has control (is its turn).
legal(choice(C, M), S):- possible(choice(C, M), S), holds(control(C), S).

% What is possible for a company to choose
possible(choice(C,'Aggressive'), S):- holds(company(C), S).
possible(choice(C,'Moderate'), S):- holds(company(C), S).

% The effects of a move: if C has chosen M, then in the next state this
% is what they did.
effect(did(C, M), choice(C, M), _S).

% The effects of a move: once a choice is made, the company loses control, i.e.
% cannot move anymore.
abnormal(control(C), choice(C, _M), _S).

% What holds finally: the outcome with companies, Moves, and Utilities.
finally(outcome(C1,M1,U1,C2,M2,U2), S):-
    final(S),
    holds(role(C1, row), S),  
    holds(did(C1, M1), S),    
    holds(role(C2, col), S),  
    holds(did(C2, M2), S),
    payoffCompany(M1, M2, U1, U2).

% Goals achieved by the companies.
finally(goal(C1, U1), S):-
    finally(outcome(C1,_,U1,_,_,_), S).
finally(goal(C2, U2), S):-
    finally(outcome(_,_,_,C2,_,U2), S).
@
```

This Prolog code carefully follows the structure provided in your original message, adapting the specifics to the new game scenario involving two competing companies and their advertising strategies. This code defines the initial state, possible moves, effects of moves, and legal states, while ensuring compatibility with SWI Prolog.~

TRACE##
~

