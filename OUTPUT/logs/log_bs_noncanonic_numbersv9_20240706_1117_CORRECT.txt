###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two campaign managers are deciding on a strategy session location for their team. One manager prefers the "Grand Conference Hall" for its prestige, while the other prefers the "Tech Innovation Center" for its modern facilities. Both agree that a united appearance is essential. If they decide on the "Grand Conference Hall," the hall advocate gets 2 points, and the tech center supporter gets 1 point. If they choose the "Tech Innovation Center," the tech advocate gets 2 points, and the hall supporter gets 1 point. If they can't agree, they hold separate sessions and gain 0 points each.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Certainly! Below is the set of domain-specific axioms for the described game involving two campaign managers. The code is compatible with SWI Prolog, and I've used numerical payoffs as requested. I've also included the `:- discontiguous` directive where necessary.

```prolog
@

:- discontiguous initial/1.
:- discontiguous initially/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous possible/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous finally/2.

% Game specific predicates for Campaign Managers' Strategy Session (CMSS)

% Payoff matrix for CMSS
payoffCMSS('GrandConferenceHall', 'GrandConferenceHall', 2, 1).
payoffCMSS('TechInnovationCenter', 'TechInnovationCenter', 1, 2).
payoffCMSS('GrandConferenceHall', 'TechInnovationCenter', 0, 0).
payoffCMSS('TechInnovationCenter', 'GrandConferenceHall', 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1, hall), s0).
initially(role(p2, tech), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P, 'GrandConferenceHall'), S):- holds(player(P), S).
possible(choice(P, 'TechInnovationCenter'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player loses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1, M1, U1, P2, M2, U2), S):-
	final(S),
	holds(role(P1, hall), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, tech), S),	
	holds(did(P2, M2), S),
	payoffCMSS(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1, _, U1, _, _, _), S).
finally(goal(P2, U2), S):-
	finally(outcome(_, _, _, P2, _, U2), S).

@
```

In this code:
- `payoffCMSS/4` defines the payoff matrix for the strategy session game.
- `initial/1` sets the initial state.
- `initially/2` specifies which fluents hold initially, including who the players are, their roles, and who has control.
- `final/1` defines the final state of the game.
- `legal/2` and `possible/2` handle the legality and possibilities of moves.
- `effect/3` and `abnormal/3` manage the effects and abnormal conditions of moves.
- `finally/2` provides the outcomes and goals achieved by the players.

Make sure to place this code in a Prolog file and you can query it using SWI Prolog to get the legal evolutions of the game.~

TRACE##
~

