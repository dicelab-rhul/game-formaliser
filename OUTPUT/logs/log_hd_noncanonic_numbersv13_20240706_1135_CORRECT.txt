###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two siblings must divide their inherited property. Each can either agree to a fair split or demand a larger share. If both agree to a fair split, they each get an equal inheritance, resulting in 0 points. If one demands more and the other agrees to a fair split, the demanding sibling gains an extra share worth 3 points, and the agreeable sibling loses that amount, worth -3 points. If both demand more, they enter a legal battle, depleting the estateâ€™s value, resulting in each getting -5 points.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Certainly! Below is the domain-specific axioms for the siblings' inheritance division game, demarcated beginning and end by `@`, and using the necessary Prolog directives for compatibility with SWI Prolog.

```prolog
@
:- discontiguous initial/1, initially/2, final/1, legal/2, possible/2, effect/3, abnormal/3, finally/2, finally/3.

% Siblings Inheritance Game specific predicates

% Payoff matrix for the inheritance game
payoffInheritance('Demand', 'Demand', -5, -5).
payoffInheritance('Agree', 'Demand', -3, 3).
payoffInheritance('Demand', 'Agree', 3, -3).
payoffInheritance('Agree', 'Agree', 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.
initially(player(sibling1), s0).
initially(player(sibling2), s0).
initially(role(sibling1, row), s0).
initially(role(sibling2, col), s0).
initially(control(sibling1), s0).
initially(control(sibling2), s0).

% A state is final when both siblings have made their choices.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):- initial(S).

% Legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% Possible choices for a sibling
possible(choice(P, 'Demand'), S):- holds(player(P), S).
possible(choice(P, 'Agree'), S):- holds(player(P), S).

% Effects of a move: if P has chosen M, then in the next state this is what they did.
effect(did(P, M), choice(P, M), _S).

% A player loses control once a choice is made
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
    final(S),
    holds(role(P1, row), S),   
    holds(did(P1, M1), S),   
    holds(role(P2, col), S),   
    holds(did(P2, M2), S),
    payoffInheritance(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
    finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
    finally(outcome(_,_,_,P2,_,U2), S).

@

% End of the Prolog code for the siblings' inheritance division game.
```

Explanation:
- The initial state is defined similarly to the prisoner's dilemma with the players being labeled as `sibling1` and `sibling2`.
- The payoff matrix for this game is defined in `payoffInheritance/4` predicate.
- The `initial/1` and `initially/2` predicates outline the initial conditions with respect to players, roles, and control.
- The `final/1`, `legal/2`, `possible/2`, `effect/3`, and `abnormal/3` predicates implement game mechanics rules similar to the given Prisoner's Dilemma example.
- The `finally/2` and `finally/3` predicates describe the outcome and the goals achieved by the players.
~

TRACE##
~

