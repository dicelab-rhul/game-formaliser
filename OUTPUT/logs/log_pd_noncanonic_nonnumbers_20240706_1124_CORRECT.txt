###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

A couple must decide whether to adopt environmentally friendly but costly habits or stick with their current, cheaper habits. If both adopt the new habits, they share a sense of mutual accomplishment and avoid environmental guilt. If one adopts it and the other doesn't, the adopter incurs higher costs and feels a sense of betrayal, while the non-adopter avoids extra costs and gains a short-term advantage. If neither adopts, they avoid the higher costs but risk feeling collective guilt.


Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Here is the set of domain-specific axioms for the new game described. The structure follows the pattern from the prisoner's dilemma example you provided.

```prolog
@ 
:- discontiguous payoffEH/6.
:- discontiguous initial/1.
:- discontiguous initial/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous possible/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous finally/2.

% Payoff matrix for Environmentally Friendly Game (EF)
% payoffEH(action1_player1, action2_player2, Utility1, Utility2)

payoffEH(adopt, adopt, 5, 5).
payoffEH(adopt, stick, -1, 3).
payoffEH(stick, adopt, 3, -1).
payoffEH(stick, stick, 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1, row), s0).
initially(role(p2, col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))) :- initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S) :- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P, adopt), S) :- holds(player(P), S).
possible(choice(P, stick), S) :- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player loses control, i.e.,
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1, M1, U1, P2, M2, U2), S) :-
    final(S),
    holds(role(P1, row), S),
    holds(did(P1, M1), S),
    holds(role(P2, col), S),
    holds(did(P2, M2), S),
    payoffEH(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S) :-
    finally(outcome(P1, _, U1, _, _, _), S).
finally(goal(P2, U2), S) :-
    finally(outcome(_, _, _, P2, _, U2), S).
@
```

You can integrate this code into your SWI-Prolog environment, and it will work similarly to the original program for the prisoner's dilemma, but for the Environmentally Friendly Game (EF). It will allow you to generate and test all legal evolutions of the game and compute the outcomes according to the specified payoffs.~

TRACE##
~

