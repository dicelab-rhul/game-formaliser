###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two neighboring farmers decide on water sharing for their crops. Each can either share water equitably or try to take more. If both share equitably, they have sufficient water, each gaining 0 points. If one tries to take more while the other shares equitably, the taker gains surplus crop yield worth 2 points, and the sharer suffers a drought loss worth -2 points. If both try to take more, they deplete the water source, leading to crop failure, and each gets -10 points.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Here are the domain-specific axioms for the water-sharing game:

```prolog
@ 
:- discontiguous payoffWS/4, initial/1, initially/2, final/1, legal/2, possible/2, effect/3, abnormal/3, finally/2.

% Payoff matrix for Water Sharing (WS)
payoffWS('More', 'More', -10, -10).
payoffWS('Share', 'More', -2, 2).
payoffWS('More', 'Share', 2, -2).
payoffWS('Share', 'Share', 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a farmer, their role, and whether they can decide.	
initially(farmer(f1), s0).
initially(farmer(f2), s0).
initially(role(f1,row), s0).
initially(role(f2,col), s0).
initially(control(f1), s0).
initially(control(f2), s0).

% When a state is final: no need to check content as it is generated by game/2,
% implying it is a legal state.
final(do(choice(_F2, _M2), do(choice(_F1, _M1), S))):-initial(S).

% A legal move is a possible move where the farmer has control.
legal(choice(F, M), S):- possible(choice(F, M), S), holds(control(F), S).

% What is possible for a farmer to choose
possible(choice(F,'More'), S):- holds(farmer(F), S).
possible(choice(F,'Share'), S):- holds(farmer(F), S).

% The effects of a move: if F has chosen M, then in the next state this
% is what they did.
effect(did(F, M), choice(F, M), _S).

% The effects of a move: once a choice is made, the farmer loses control, i.e.
% cannot move anymore.
abnormal(control(F), choice(F, _M), _S).

% What holds finally: the outcome with farmers, Moves, and Utilities.
finally(outcome(F1,M1,U1,F2,M2,U2), S):-
	final(S),
	holds(role(F1, row), S),
	holds(did(F1, M1), S),
	holds(role(F2, col), S),
	holds(did(F2, M2), S),
	payoffWS(M1, M2, U1, U2).

% Goals achieved by the farmers.
finally(goal(F1, U1), S):-
	finally(outcome(F1,_,U1,_,_,_), S).
finally(goal(F2, U2), S):-
	finally(outcome(_,_,_,F2,_,U2), S).
@
```

This code defines the domain-specific axioms for the water-sharing game. It follows the same structure as the previous prisoner's dilemma game, but with payoffs and roles tailored to the water-sharing scenario as explained in the verbal description. The code uses the same conventions and predicates to integrate seamlessly with the given Prolog framework for situation calculus and game evolutions.~

TRACE##
~

