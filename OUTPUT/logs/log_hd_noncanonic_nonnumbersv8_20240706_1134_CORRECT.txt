###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

A labor union and company management are negotiating a new contract. Both can either compromise on wages and benefits or hold firm on their demands. If both compromise, a reasonable contract is agreed upon. If one holds firm and the other compromises, the firm holder gets more favorable terms. If both hold firm, negotiations may fail, leading to strikes and loss of productivity.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Below is the set of domain-specific axioms for the labor union and company management negotiation game, with numerical payoffs. This code is compatible with SWI-Prolog.

```prolog
@

:- discontiguous effect/3.
:- discontiguous payoffNeg/4.
:- discontiguous holds/2.
:- discontiguous initially/2.
:- discontiguous possible/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous abnormal/3.
:- discontiguous finally/2.
:- discontiguous initial/1.

% Payoff matrix for Negotiation Game
payoffNeg('F', 'F', -1, -1). % Both hold firm: negative payoff due to lost productivity
payoffNeg('C', 'F', 0, 3).   % Union compromises, company holds firm: better terms for the firm holder
payoffNeg('F', 'C', 3, 0).   % Company compromises, union holds firm: better terms for the firm holder
payoffNeg('C', 'C', 2, 2).   % Both compromise: reasonable contract for both

% Initial state
initial(s0).

% What holds initially: who is a party, their role, and whether they can play.
initially(party(union), s0).
initially(party(company), s0).
initially(role(union, row), s0). % Union represents the row player
initially(role(company, col), s0). % Company represents the column player
initially(control(union), s0).
initially(control(company), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_Company, _MCompany), do(choice(_Union, _MUnion), S))) :- initial(S).

% A legal move is a possible move where the party has control (is its turn).
legal(choice(P, M), S) :- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a party to choose
possible(choice(P, 'F'), S) :- holds(party(P), S).
possible(choice(P, 'C'), S) :- holds(party(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the party loses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with parties, Moves, and Utilities.
finally(outcome(P1, M1, U1, P2, M2, U2), S) :-
	final(S),
	holds(role(P1, row), S),
	holds(did(P1, M1), S),
	holds(role(P2, col), S),
	holds(did(P2, M2), S),
	payoffNeg(M1, M2, U1, U2).

% Goals achieved by the parties.
finally(goal(P1, U1), S) :-
	finally(outcome(P1, _, U1, _, _, _), S).
finally(goal(P2, U2), S) :-
	finally(outcome(_, _, _, P2, _, U2), S).

@
```

This code defines the game-specific predicates and facts for a negotiation game between a labor union and company management. The payoffs are based on whether each party chooses to compromise ('C') or hold firm ('F'). The state transition logic and outcome evaluation follow the same structure as in the provided Prisoner's Dilemma code.~

TRACE##
~

