###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two chefs in a cooking show work on a competition dish. They can either collaborate to create an innovative dish or work independently on safer, less ambitious dishes. If both collaborate, they achieve a high reward, each receiving a promotion worth 3 points. If one collaborates while the other works independently, the collaborator gains nothing (0 points) and the independent worker earns a moderate reward (2 points). If both work independently, they each receive a low reward of 1 point.


Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Sure, here is the set of domain-specific axioms for the new game, annotated as requested:

```prolog
@ 
:- discontiguous p/3.

/* Game specific predicates for Cooking Show Game */

/* Payoff matrix for Cooking Show Game */
payoffCSG('I', 'I', 1, 1).
payoffCSG('C', 'I', 0, 2).
payoffCSG('I', 'C', 2, 0).
payoffCSG('C', 'C', 3, 3).

/* Initial state */
initial(s0).

/* What holds initially: who is a player, their role, and whether they can play. */	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

/* When a state is final: no need to check content as it is generated by game/2,
   implying it is a legal state. */
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

/* A legal move is a possible move where the player has control (is its turn). */
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

/* What is possible for a player to choose */
possible(choice(P,'I'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

/* The effects of a move: if P has chosen M, then in the next state this
   is what they did. */
effect(did(P, M), choice(P, M), _S).

/* The effects of a move: once a choice is made, the player loses control, 
   i.e., cannot move anymore. */
abnormal(control(P), choice(P, _M), _S).

/* What holds finally: the outcome with players, Moves, and Utilities. */
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffCSG(M1, M2, U1, U2).

/* Goals achieved by the players. */
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
@ 
```

Replace the above code's `payoffCSG` predicate values and roles with those related to the new game, ensuring that the roles and values align with the narrative of the game. The predicate names and logic are reused based on the provided Prisoner's Dilemma code structure. Make sure to test this code in an SWI-Prolog environment to ensure compatibility and correctness.~

TRACE##
~

