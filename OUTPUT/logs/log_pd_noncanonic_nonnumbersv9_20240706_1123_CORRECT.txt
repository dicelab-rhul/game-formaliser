###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two defense contractors must decide whether to bid competitively for a lucrative government contract or price-fix to ensure high profits. If both bid competitively, the government gets a fair deal and both companies maintain integrity but lower profits. If one bids competitively and the other price-fixes, the competitive bidder risks lower profits or loss of the contract, while the price-fixer maximizes their gain. If neither competes and they both price-fix, they secure high profits but risk legal consequences and damaged reputations.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Here is the Prolog code with the domain-specific axioms for the "defense contractors" game:

```prolog
@ 

:- discontiguous initial/1, initially/2, final/1, legal/2, possible/2, effect/3, abnormal/3, finally/2.

% Payoff matrix for Defense Contractors' Game
payoffDefContractors('Competitive', 'Competitive', 3, 3).
payoffDefContractors('PriceFix', 'Competitive', 1, 4).
payoffDefContractors('Competitive', 'PriceFix', 4, 1).
payoffDefContractors('PriceFix', 'PriceFix', 2, 2).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(d1), s0).
initially(player(d2), s0).
initially(role(d1, row), s0).
initially(role(d2, col), s0).
initially(control(d1), s0).
initially(control(d2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_D2, _M2), do(choice(_D1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(D, M), S):- possible(choice(D, M), S), holds(control(D), S).

% What is possible for a player to choose
possible(choice(D,'Competitive'), S):- holds(player(D), S).
possible(choice(D,'PriceFix'), S):- holds(player(D), S).

% The effects of a move: if D has chosen M, then in the next state this
% is what they did.
effect(did(D, M), choice(D, M), _S).

% The effects of a move: once a choice is made, the player loses control, i.e.
% cannot move anymore.
abnormal(control(D), choice(D, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(D1,M1,U1,D2,M2,U2), S):-
	final(S),
	holds(role(D1, row), S),	
	holds(did(D1, M1), S),	
	holds(role(D2, col), S),	
	holds(did(D2, M2), S),
	payoffDefContractors(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(D1, U1), S):-
	finally(outcome(D1,_,U1,_,_,_), S).
finally(goal(D2, U2), S):-
	finally(outcome(_,_,_,D2,_,U2), S).

@
```

This code defines the specifics of the defense contractors' game within the situation calculus framework, including initial conditions, final states, legal moves, and payoffs. The game structure remains similar to the prisoner's dilemma in terms of how the decisions and payoffs are modeled. The clauses are preceded by the `:- discontiguous` directive to ensure compatibility with SWI Prolog when the clauses are not contiguous in the source file.~

TRACE##
~

