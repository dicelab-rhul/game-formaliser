###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two business partners are selecting the location for a crucial meeting with a client. One prefers the high-end restaurant "Gourmet Heaven," while the other likes the trendy cafe "Urban Buzz." They both agree that attending the meeting together is more vital than individually. If they choose "Gourmet Heaven," the fan of fine dining gets 2 points, and the cafe lover gets 1 point. If they select "Urban Buzz," the cafe enthusiast gets 2 points, and the fine dining lover gets 1 point. If they split locations, they miss the meeting, earning 0 points each.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
```prolog
% The code starts here
@

% Discontiguous declaration for SWI Prolog
:- discontiguous holds/2.
:- discontiguous initially/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous final/1.
:- discontiguous possible/2.
:- discontiguous legal/2.
:- discontiguous finally/2.

% Game specific predicates for the location selection game

% Payoff matrix for location selection game
payoffLocation('Gourmet Heaven', 'Gourmet Heaven', 2, 1).
payoffLocation('Urban Buzz', 'Urban Buzz', 1, 2).
payoffLocation('Gourmet Heaven', 'Urban Buzz', 0, 0).
payoffLocation('Urban Buzz', 'Gourmet Heaven', 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a player, their preferred locations, and control.
initially(player(p1), s0).
initially(player(p2), s0).
initially(preference(p1, 'Gourmet Heaven'), s0).
initially(preference(p2, 'Urban Buzz'), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _Loc2), do(choice(_P1, _Loc1), S))) :- initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, Loc), S) :- possible(choice(P, Loc), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P, 'Gourmet Heaven'), S) :- holds(player(P), S).
possible(choice(P, 'Urban Buzz'), S) :- holds(player(P), S).

% The effects of a move: if P has chosen Loc, then in the next state this
% is what they did.
effect(did(P, Loc), choice(P, Loc), _S).

% The effects of a move: once a choice is made, the player loses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _Loc), _S).

% What holds finally: the outcome with players, Locations, and Utilities.
finally(outcome(P1, Loc1, U1, P2, Loc2, U2), S) :-
    final(S),
    holds(preference(P1, 'Gourmet Heaven'), S),
    holds(did(P1, Loc1), S),
    holds(preference(P2, 'Urban Buzz'), S),
    holds(did(P2, Loc2), S),
    payoffLocation(Loc1, Loc2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S) :-
    finally(outcome(P1, _, U1, _, _, _), S).
finally(goal(P2, U2), S) :-
    finally(outcome(_, _, _, P2, _, U2), S).

@
% The code ends here
```~

TRACE##
~

