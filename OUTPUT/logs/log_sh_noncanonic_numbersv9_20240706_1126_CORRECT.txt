###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two logging companies have the option to enforce sustainable practices to preserve the forest. If both adopt these practices, the forest thrives, providing long-term benefits worth 7 points each. If one adopts sustainable practices and the other does not, the sustainably operating company faces higher costs and gains nothing (0 points), while the non-sustainable company benefits from immediate profits worth 4 points. If neither uses sustainable practices, they overexploit the forest, securing short-term gains of 3 points each but risking long-term depletion.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Below is the set of domain-specific axioms for the new game described, encapsulated within the '@' symbols. This code is compatible with SWI Prolog and includes the appropriate `discontiguous` declarations where needed:

```prolog
@
% SWI-Prolog directive to declare predicate clauses as discontiguous
:- discontiguous initial/1, initially/2, final/1, legal/2, possible/2, effect/3, abnormal/3, finally/2.

% Game specific predicates for the new logging game
% Payoff matrix for Logging Game
payoffLG('S', 'S', 7, 7).
payoffLG('S', 'NS', 0, 4).
payoffLG('NS', 'S', 4, 0).
payoffLG('NS', 'NS', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.
initially(player(l1), s0).
initially(player(l2), s0).
initially(role(l1, row), s0).
initially(role(l2, col), s0).
initially(control(l1), s0).
initially(control(l2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_L2, _M2), do(choice(_L1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(L, M), S):- possible(choice(L, M), S), holds(control(L), S).

% What is possible for a player to choose
possible(choice(L,'S'), S):- holds(player(L), S).
possible(choice(L,'NS'), S):- holds(player(L), S).

% The effects of a move: if L has chosen M, then in the next state this
% is what they did.
effect(did(L, M), choice(L, M), _S).

% The effects of a move: once a choice is made, the player loses control, i.e.
% cannot move anymore.
abnormal(control(L), choice(L, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(L1, M1, U1, L2, M2, U2), S):-
	final(S),
	holds(role(L1, row), S),
	holds(did(L1, M1), S),
	holds(role(L2, col), S),
	holds(did(L2, M2), S),
	payoffLG(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(L1, U1), S):-
	finally(outcome(L1, _, U1, _, _, _), S).
finally(goal(L2, U2), S):-
	finally(outcome(_, _, _, L2, _, U2), S).
@
```

In this Prolog code:

- The `payoffLG/4` predicate defines the numerical payoffs for each combination of choices ('S' for sustainable, 'NS' for non-sustainable).
- `initial/1` and `initially/2` predicates define the initial state where two players (`l1` and `l2`) can make choices, and their initial roles and control states.
- The `final/1` predicate defines the conditions for a final state in terms of the sequence of choices.
- The `legal/2` and `possible/2` predicates define the legality and possibility of moves.
- The `effect/3` and `abnormal/3` predicates capture the effects of actions on the game state.
- The `finally/2` predicates define the outcomes and goals achieved by the players.

This game setup can be used similarly to the provided prisoner's dilemma game within a situation calculus framework in Prolog.~

TRACE##
~

