###PROMPT##
The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).  
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).


The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

The prisoner's dilemma game, having the following verbal description:

"You play a game with an anonymous player in which you simultaneously make a choice. Your payoff depends on both choices. If you both pick C, you each get 3$. If you choose C while they choose D, you get 1$, and they get 4$. Similarly, if you pick D while they pick C, you get 4$, and they get 1$. If you both pick D, you each earn 2$. The game has only one round."

can be specified as follows:


/* Game specific predicates for Prisoner's Dilemma (PD) */

% Payoff matrix for PD
payoffPD('D', 'D', 2, 2).
payoffPD('C', 'D', 1, 4).
payoffPD('D', 'C', 4, 1).
payoffPD('C', 'C', 3, 3).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.	
initially(player(p1), s0).
initially(player(p2), s0).
initially(role(p1,row), s0).
initially(role(p2,col), s0).
initially(control(p1), s0).
initially(control(p2), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):-initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a player to choose
possible(choice(P,'D'), S):- holds(player(P), S).
possible(choice(P,'C'), S):- holds(player(P), S).

% The effects of a move: if P has chosen M, then in the next state this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the player looses control, i.e.
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(P1,M1,U1,P2,M2,U2), S):-
	final(S),
	holds(role(P1, row), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, col), S),	
	holds(did(P2, M2), S),
	payoffPD(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
	
The verbal decription of another game is as follows:

Two political candidates in a major election must independently decide whether to focus their campaign on economic policies or social issues. If both candidates choose the same focus, Candidate A, the underdog, gains an additional 5% in voter support, while Candidate B, the frontrunner, loses 5%. If their campaign focuses differ, Candidate B gains 4% in voter support, and Candidate A loses 4%, as the underdog struggles to differentiate themselves effectively.

Produce set of domain specific axioms for the game. Use numerical payoffs. Mark the beginning and end of the code with a '@'. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.

###ATTEMPT##0~
RESPONSE##
Sure! Based on the provided verbal description of the game and the structure of the Prisoner's Dilemma example, here are the domain-specific axioms for the political campaign game:

```prolog
@
:- discontiguous holds/2.
:- discontiguous initially/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous possible/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous finally/2.

/* Game specific predicates for Political Campaign Game (PCG) */

% Payoff matrix for PCG
payoffPCG('Economic', 'Economic', 5, -5).
payoffPCG('Social', 'Social', 5, -5).
payoffPCG('Economic', 'Social', -4, 4).
payoffPCG('Social', 'Economic', -4, 4).

% Initial state
initial(s0).

% What holds initially: who is a candidate, their role, and whether they can campaign. 
initially(candidate(a), s0).
initially(candidate(b), s0).
initially(role(a, 'underdog'), s0).
initially(role(b, 'frontrunner'), s0).
initially(control(a), s0).
initially(control(b), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(choice(_P2, _M2), do(choice(_P1, _M1), S))):- initial(S).

% A legal move is a possible move where the candidate has control (is its turn).
legal(choice(P, M), S):- possible(choice(P, M), S), holds(control(P), S).

% What is possible for a candidate to choose
possible(choice(P, 'Economic'), S):- holds(candidate(P), S).
possible(choice(P, 'Social'), S):- holds(candidate(P), S).

% The effects of a move: if P has chosen M, then in the next state, this
% is what they did.
effect(did(P, M), choice(P, M), _S).

% The effects of a move: once a choice is made, the candidate loses control, i.e.,
% cannot move anymore.
abnormal(control(P), choice(P, _M), _S).

% What holds finally: the outcome with candidates, Moves, and Payoffs.
finally(outcome(P1, M1, U1, P2, M2, U2), S):-
	final(S),
	holds(role(P1, 'underdog'), S),	
	holds(did(P1, M1), S),	
	holds(role(P2, 'frontrunner'), S),	
	holds(did(P2, M2), S),
	payoffPCG(M1, M2, U1, U2).

% Goals achieved by the candidates.
finally(goal(P1, U1), S):-
	finally(outcome(P1,_,U1,_,_,_), S).
finally(goal(P2, U2), S):-
	finally(outcome(_,_,_,P2,_,U2), S).
@

```

This Prolog code defines the domain-specific axioms for the political campaign game using the situation calculus framework from the previous example. The `payoffPCG` predicate defines the payoffs based on the chosen campaign focus, and other predicates such as `initially`, `legal`, and `effect` specify the rules and effects specific to this game. The `finally` predicate ensures that the outcomes and goals are calculated correctly.~

TRACE##
~

